<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://badetitou.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://badetitou.github.io/" rel="alternate" type="text/html" /><updated>2020-12-01T09:15:06+00:00</updated><id>http://badetitou.github.io/feed.xml</id><title type="html">Benoît Verhaeghe</title><subtitle>Presentation of Benoît &quot;badetitou&quot; Verhaeghe</subtitle><entry><title type="html">Testing and releasing Pharo with GitHub actions</title><link href="http://badetitou.github.io/misc/pharo/2020/11/30/Testing-pharo-with-github-actions/" rel="alternate" type="text/html" title="Testing and releasing Pharo with GitHub actions" /><published>2020-11-30T16:00:00+00:00</published><updated>2020-11-30T16:00:00+00:00</updated><id>http://badetitou.github.io/misc/pharo/2020/11/30/Testing%20pharo%20with%20github%20actions</id><content type="html" xml:base="http://badetitou.github.io/misc/pharo/2020/11/30/Testing-pharo-with-github-actions/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hi :wave:, Travis is becoming a pay to use service.
So why not moving to GitHub actions to test your Pharo project?&lt;/p&gt;

&lt;p&gt;Here I’m presenting everything you need to know to test your project with GitHub Actions.&lt;/p&gt;

&lt;p&gt;We’ll also see how to release your project (also continuously :sparkles:).&lt;/p&gt;

&lt;h2 id=&quot;testing-with-smalltalk-ci&quot;&gt;Testing with Smalltalk CI&lt;/h2&gt;

&lt;h3 id=&quot;the-simplest-case&quot;&gt;The simplest case&lt;/h3&gt;

&lt;p&gt;To test a Pharo project, we will create a GitHub action.
This action will on each commit on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch test your project.&lt;/p&gt;

&lt;p&gt;To do so it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;checkouts your project&lt;/li&gt;
  &lt;li&gt;runs Smalltalk CI on your project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create the GitHub action, you need first to create a file under the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;git root&amp;gt;/.github/workflows&lt;/code&gt;.
Since the action is to test to project, I decided to name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.yml&lt;/code&gt; but any other name work.
So in my git repository I have a file in: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;git root&amp;gt;/.github/workflows/test.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the file write:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Controls when the action will run. Triggers the workflow on push or pull request&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# events but only for the development branch&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hpi-swa/setup-smalltalkCI@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;smalltalkci&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;smalltalk-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pharo64-8.0&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-version }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout-minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first lines indicate when the action is triggered.
In this simple case, it is triggered on each push on the branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, the jobs part described the steps of the CI.
It runs on a ubuntu image.
There are three steps,
    (1) it checkouts the last version of the project for the current branch,
    (2) it prepares the smalltalkCI tool, and
    (3) it runs smalltalkCI on your project for the Pharo64-8.0 image.&lt;/p&gt;

&lt;h3 id=&quot;a-more-complex-case&quot;&gt;A more complex case&lt;/h3&gt;

&lt;p&gt;In this section, we see another example with usage of matrix.
Indeed, you might want to test your project over several pharo version.
To do so, we will use GitHub actions matrix.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;smalltalk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Pharo64-8.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Pharo64-9.0&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hpi-swa/setup-smalltalkCI@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;smalltalk-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;smalltalkci -s ${{ matrix.smalltalk }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout-minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The name and the trigger part do not change.
In the build part, we add a matrix strategy.
In this strategy, we set the name of the Pharo versions compatible with our project.
Then, in the steps, we indicate to SmallTalk CI to use the current smalltalk name of the matrix.&lt;/p&gt;

&lt;h3 id=&quot;testing-pull-request&quot;&gt;Testing Pull Request&lt;/h3&gt;

&lt;p&gt;It is also possible to test on each Pull Request instead of commit to the main branch.
To do so, change the trigger part by&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assigned&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;opened&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reopened&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Many other trigger options exist, you should check them on the &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows&quot;&gt;GitHub action page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A final version of the file can be found &lt;a href=&quot;https://github.com/moosetechnology/Moose/blob/development/.github/workflows/test.yml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;releasing&quot;&gt;Releasing&lt;/h2&gt;

&lt;p&gt;Using GitHub action to test your project is nice, but we can do more.
We will automatically release our project using GitHub Action.
To so, we create two other actions: one for common release, one for continuous release.&lt;/p&gt;

&lt;h3 id=&quot;release&quot;&gt;Release&lt;/h3&gt;

&lt;p&gt;To create a release action, we first create a new file, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;git root&amp;gt;/.github/workflows/release.yml&lt;/code&gt;.
This action is triggered on release creation and will test the project and release an image with the project loaded.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Release&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PROJECT_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}-Moose&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;smalltalk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Pharo64-9.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Pharo64-8.0&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hpi-swa/setup-smalltalkCI@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;smalltalk-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;smalltalkci -s ${{ matrix.smalltalk }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout-minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Package&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mv /home/runner/.smalltalkCI/_builds/* .&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mv TravisCI.image $PROJECT_NAME.image&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mv TravisCI.changes $PROJECT_NAME.changes&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;zip -r $PROJECT_NAME.zip $PROJECT_NAME.image $PROJECT_NAME.changes *.sources pharo.version&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;ls&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Get release&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;get_release&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bruceadams/get-release@v1.2.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.token }}&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload Release Asset&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;upload-release-asset&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-release-asset@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;upload_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.get_release.outputs.upload_url }}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps &lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./${{ env.PROJECT_NAME }}.zip&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;asset_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.PROJECT_NAME }}.zip&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;asset_content_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/zip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above example is the one used by the &lt;a href=&quot;https://moosetechnology.github.io/moose-wiki/&quot;&gt;Moose Project&lt;/a&gt;.
First, we define an environment variable name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;current matrix name&amp;gt;-Moose&lt;/code&gt;.
Additionally to the testing steps, we add three steps:
&lt;em&gt;Package&lt;/em&gt; takes the source file after testing the project (&lt;em&gt;i.e.&lt;/em&gt; .image, .changes, .sources, and pharo.version) and zip them into one zip file with the current matrix name.
 &lt;em&gt;Get release&lt;/em&gt; allows us to access to release GitHub API.
Thus, we can access the upload URL of the release.
Then, &lt;em&gt;Upload Release Asset&lt;/em&gt; upload the zip file created in the &lt;em&gt;package&lt;/em&gt; step.&lt;/p&gt;

&lt;p&gt;When developers release their code, the action downloads an image for each specified Pharo version, tests it, packages it, and uploads it in the GitHub release.
Then, users can directly download the release version of the project, with project code loaded in the image.&lt;/p&gt;

&lt;h3 id=&quot;continuous-release&quot;&gt;Continuous release&lt;/h3&gt;

&lt;p&gt;For the continuous release, we add a schedule to trigger the GitHub actions.
Thus, if the Pharo image evolves, our build will evolve with it.&lt;/p&gt;

&lt;p&gt;Note that we have also changed the way to update the release.
Indeed, the &lt;em&gt;Update Release&lt;/em&gt; automatically creates a release and upload the last version of the zip file.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Continuous&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Controls when the action will run. Triggers the workflow on push or pull request&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# events but only for the development branch&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;development&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# * is a special character in YAML so you have to quote this string&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PROJECT_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}-Moose&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;smalltalk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Pharo64-9.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Pharo64-8.0&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hpi-swa/setup-smalltalkCI@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;smalltalk-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.smalltalk }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;smalltalkci -s ${{ matrix.smalltalk }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout-minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;package&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mv /home/runner/.smalltalkCI/_builds/* .&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mv TravisCI.image $PROJECT_NAME.image&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mv TravisCI.changes $PROJECT_NAME.changes&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;zip -r $PROJECT_NAME.zip $PROJECT_NAME.image $PROJECT_NAME.changes *.sources pharo.version&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;ls&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update Release&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;johnwbyrd/update-release@v1.0.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;continuous'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.PROJECT_NAME }}.zip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-releases-to-pharo-launcher&quot;&gt;Add releases to Pharo Launcher&lt;/h3&gt;

&lt;p&gt;Finally, I want to share with you a little script to add the GitHub Release into the &lt;a href=&quot;https://pharo.org&quot;&gt;Pharo Launcher&lt;/a&gt;.
To do so&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Pharo Launcher&lt;/li&gt;
  &lt;li&gt;Open a Playground (Ctrl + O, Ctrl + W)&lt;/li&gt;
  &lt;li&gt;Execute the following piece of code&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; sources &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;PhLTemplateSource&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#HttpListing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Moose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://github.com/moosetechnology/Moose/releases'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;filterPattern:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'href=&quot;([^&quot;]*/Pharo[0-9][^&quot;]*.zip)&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;templateNameFormat:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{6} ({5})'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;PhLUserTemplateSources&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sourcesFile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeStreamDo:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;newLine:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;prettyPrint:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;nextPut:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This piece of code creates a local source file for the Pharo Launcher template.
In the source file, it indicates to use an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpListing&lt;/code&gt; from the release page of GitHub.
Then, with filter pattern, it creates a beautiful list inside the Pharo Launcher.&lt;/p&gt;

&lt;p&gt;To adapt the piece of code for your project, you need to change the name: and url: method parameters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/misc/img-2020-11-30-GithubActions/pharo-launcher.png&quot; alt=&quot;Pharo Launcher with linkg to GitHub actions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;The three files: &lt;em&gt;test&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, and &lt;em&gt;continuous&lt;/em&gt; can be found in the &lt;a href=&quot;https://github.com/moosetechnology/Moose/tree/development/.github/workflows&quot;&gt;Moose project repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;I’d like to thanks the authors of &lt;a href=&quot;https://github.com/hpi-swa/smalltalkCI&quot;&gt;smalltalkCI&lt;/a&gt; for their incredible work!&lt;/p&gt;</content><author><name>Benoît &quot;badetitou&quot; Verhaeghe</name></author><category term="misc" /><category term="pharo" /><summary type="html">Introduction</summary></entry><entry><title type="html">Download musics from Google Play Music</title><link href="http://badetitou.github.io/misc/pharo/ffi/2020/06/19/Download-music/" rel="alternate" type="text/html" title="Download musics from Google Play Music" /><published>2020-06-19T10:00:00+00:00</published><updated>2020-06-19T10:00:00+00:00</updated><id>http://badetitou.github.io/misc/pharo/ffi/2020/06/19/Download%20music</id><content type="html" xml:base="http://badetitou.github.io/misc/pharo/ffi/2020/06/19/Download-music/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://play.google.com/music/&quot;&gt;Google Play Music (GPM)&lt;/a&gt; is a service proposed by Google to listen musics online (like Spotify, Deezer, …).
Having a premium subscription, I can listen a lot of music by using the online service, but when I have no internet connection… I cannot :-( .
So I wanted to download the music ^^.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This might be illegal, so, I used this situation to explain the process to use Pharo to download musics from GPM
but you &lt;strong&gt;must not&lt;/strong&gt; use this for real.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;My idea is simple: if I can listen to musics from my computer, it means my computer has to download the music.
I know that musics coming from GPM are in the mp3 format.
So the process to download the music is simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Access my GPM library&lt;/li&gt;
  &lt;li&gt;For each music download the corresponding mp3 file.&lt;/li&gt;
  &lt;li&gt;Set the metadata of each music&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;access-my-gpm-library&quot;&gt;Access my GPM library&lt;/h3&gt;

&lt;p&gt;There is no official API for GPM service, however, a the &lt;a href=&quot;https://unofficial-google-music-api.readthedocs.io/en/latest/&quot;&gt;gmusicapi&lt;/a&gt; python project has been developed to create an unofficial API.
This API allows us to access every element of our GPM library.&lt;/p&gt;

&lt;p&gt;I’m not that good in Python, but I know it is possible to control python over Pharo.
So I decided to use the &lt;a href=&quot;https://github.com/aranega/pybridge&quot;&gt;pybridge&lt;/a&gt; project of &lt;a href=&quot;https://github.com/aranega&quot;&gt;Vincent Aranega&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PyBridge allows us to use python language in Pharo.
So, I’ll use it to load and use the unofficial GPM API.&lt;/p&gt;

&lt;h4 id=&quot;set-up-pybridge&quot;&gt;Set up PyBridge&lt;/h4&gt;

&lt;p&gt;PyBridge is currently a work in progress and consequently asks a bit of a SetUp.
One needs to download the server project and the Pharo client project.&lt;/p&gt;

&lt;p&gt;For the &lt;a href=&quot;https://github.com/aranega/pybridge&quot;&gt;Pharo client project&lt;/a&gt;, it is super easy.
I only need to download the project from GitHub and install the baseline:&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Metacello&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;baseline:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PyBridge'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;repository:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'github://aranega/pybridge/src'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;a href=&quot;https://github.com/aranega/pybridge&quot;&gt;Server project&lt;/a&gt;, the project is inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; branch of the git repository.
It requires &lt;a href=&quot;https://pypi.org/project/pipenv/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipenv&lt;/code&gt;&lt;/a&gt; to simply setup python virtual environments.
So clone it in another folder and create a virtualenv by doing a simple:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pipenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmusicapi&lt;/code&gt; and run the server by executing the following commands:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pipenv shell
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pybridge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gmusicapi
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pybridge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python server.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! You have correctly set up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyBridge&lt;/code&gt; to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmusicapi&lt;/code&gt; library!&lt;/p&gt;

&lt;h3 id=&quot;log-in-gpm&quot;&gt;Log in GPM&lt;/h3&gt;

&lt;p&gt;Before using the library, I need to log in inside GPM.
To do so, I will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmusicapi&lt;/code&gt;.
The usage of the python library in Pharo is pretty forward as PyBridge exposes python objects in a Smalltalk fashion.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; mobileClient api &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;Access to the API class&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mobileClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PyBridge&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gmusicapi::Mobileclient'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;Create a new instance&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mobileClient&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;Create authentification key&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform_oauth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;This step must be done only once by GPM account to get a oauth key.&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;Login using oauth key&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oauth_login:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'XXXXX'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;XXXXX is my private key ^-^&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice! I have now a full access to the GPM API using PyBridge and Pharo.&lt;/p&gt;

&lt;h2 id=&quot;download-mp3-files&quot;&gt;Download mp3 files&lt;/h2&gt;

&lt;p&gt;GPM does not allow the users to download music.
However, it is possible to ask for the audio stream in a mp3 format.
I will use this to download the files ^-^.&lt;/p&gt;

&lt;p&gt;In the following, I will present an example to download the album &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypnotize_(album)&quot;&gt;&lt;em&gt;Hypnotize&lt;/em&gt; of &lt;em&gt;System Of A Down&lt;/em&gt;&lt;/a&gt;.
The album is in my GPM library so I can retrieve it in “my songs”.&lt;/p&gt;

&lt;p&gt;To download the musics, I will access to all my musics libraries, select the music that belongs to the album, and then download the musics.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;access to all my songs&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;get_all_songs is part of the python library&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;take care with index in python&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; music &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;music&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;music&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#album&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;literalValue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beginsWith:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hypnotize'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;is the music at index part of the album?&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;ifTrue:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/home/user/music'&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asFileReference&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;music&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.mp3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binaryWriteStreamDo:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mp3WriteStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZnEasy&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_stream_url:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;music&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeOn:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mp3WriteStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;download the file&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have now download all the music of the album.
To summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pharo asks for all songs to Python&lt;/li&gt;
  &lt;li&gt;Then Pharo iterates on the Pyhton Map to select the correct musics.&lt;/li&gt;
  &lt;li&gt;It asks to Python the URL stream for a Music&lt;/li&gt;
  &lt;li&gt;And it uses Zinc to download the music and creates the mp3 file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-the-metadata&quot;&gt;Set the metadata&lt;/h2&gt;

&lt;p&gt;Our strategy works pretty well but the metadata of the mp3 files are not set.
It can not be a problem but it is preferable when using a music manager (such as Clementine, Music Bee, Itunes, …).
So, I will use VLC to set the metadata of our file.
It is possible to use VLC through Pharo using the &lt;a href=&quot;https://github.com/badetitou/Pharo-LibVLC&quot;&gt;Pharo-LibVLC project&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;set-up-pharo-libvlc&quot;&gt;Set Up Pharo LibVLC&lt;/h3&gt;

&lt;p&gt;Installing the FFI binding of VLC for Pharo is easy.
You need to: (1) install &lt;a href=&quot;https://www.videolan.org/&quot;&gt;VLC&lt;/a&gt;, and (2) install Pharo-LibVLC.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Metacello&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;baseline:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'VLC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;repository:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'github://badetitou/Pharo-LibVLC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, it is possible to use VLC in Pharo after initializing it.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;vlc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VLCLibrary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uniqueInstance&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createVLCInstance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;set-the-metadata-1&quot;&gt;Set the metadata&lt;/h3&gt;

&lt;p&gt;Inside the previous script, I insert the code to set metadata using VLC.
First, I create a reference to the mp3 file for VLC, then I set the metadata using VLC API.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; media &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vlc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMediaFromPath:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;create mp3 reference for VLC&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMeta:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VLCMetaT&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;libvlc_meta_Album&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;music&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#album&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;literalValue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMeta:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VLCMetaT&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;libvlc_meta_Title&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;music&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;literalValue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example, I only set “album” and “title” attribute but it is possible to set &lt;a href=&quot;https://unofficial-google-music-api.readthedocs.io/en/latest/reference/mobileclient.html#songs&quot;&gt;more metadata&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have used Zinc, VLC, and Python with a Python library to download musics for Google Play Music service.
It shows how easy it is to use Pharo with other programming languages
    and I hope it will help you to create many super cool projects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;I REMIND YOU THAT THIS WORK MIGHT NOT BE LEGAL SO CONSIDER IT ONLY AS AN EXAMPLE!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Benoît &quot;badetitou&quot; Verhaeghe</name></author><category term="misc" /><category term="pharo" /><category term="ffi" /><summary type="html">Introduction</summary></entry><entry><title type="html">Collect users’ data</title><link href="http://badetitou.github.io/misc/pharo/data/2019/10/17/EventCollect/" rel="alternate" type="text/html" title="Collect users’ data" /><published>2019-10-17T10:00:00+00:00</published><updated>2019-10-17T10:00:00+00:00</updated><id>http://badetitou.github.io/misc/pharo/data/2019/10/17/EventCollect</id><content type="html" xml:base="http://badetitou.github.io/misc/pharo/data/2019/10/17/EventCollect/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Few years ago, I wanted to collect data from Pharo users (see &lt;a href=&quot;/projects/TUA/TUA&quot;&gt;Tests Usage Analyser&lt;/a&gt;).
I was like, &lt;em&gt;Hmm, how can I do that? Do we already have such tool? :thinking:&lt;/em&gt;.
And &lt;strong&gt;YES&lt;/strong&gt;!
We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GTEventCollector&lt;/code&gt;.
You probably have used it already through the privacy settings.&lt;/p&gt;

&lt;p&gt;In this post, I’ll explain how to set up your own data collector and how to use it.
Then, we’ll see how to extract the data.&lt;/p&gt;

&lt;h2 id=&quot;add-a-new-event-collector&quot;&gt;Add a new Event Collector&lt;/h2&gt;

&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;The first step to collect data is to create a new instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GTEventCollector&lt;/code&gt;.
It is this instance that will be used to send new data.
We can also use the subclass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GTEventCollector&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create a new instance:&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;eventCollector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GTEventCollector&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Creating a collector is not enough.
It needs to be configured to be completely operational.
In particular, we need to register it in the GTRecorder.
This object has the responsibility to send the data to the server that will gather the data.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;eventCollector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GTEventCollector&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the event collector is created, we can customize it for our records.
We can change multiple properties: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#url:&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#category:&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#occupent:&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#url:&lt;/code&gt; is the server website. The default one is: &lt;em&gt;http://gc.dcc.uchile.cl.:8080/gt/events&lt;/em&gt;. We may want to change it for security or privacy purpose.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#category:&lt;/code&gt; is used to group your data in a specific directory in the server. It is useful to analyse only the data of your application. In my case, I used the category &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#testsUsageAnalyserEvents&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#occupent:&lt;/code&gt; is an instance of any object. When it is removed by the GC, the recorder unregisters the collector. So, using an occupent is a good idea to keep only one instance of the recorder instead of creating a new one each time. In my case, I use an instance of &lt;a href=&quot;https://github.com/pharo-open-documentation/pharo-wiki/blob/master/PharoProjects/Announcer.md&quot;&gt;Announcer&lt;/a&gt;, so the collector exists until the ‘Announce’ instance is removed from the memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the end, we have the following code to create a collector:&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;eventCollector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GTEventCollector&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;occupant:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUAAnnouncer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uniqueInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;category:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#testsUsageAnalyserEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;yourself&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collect-data&quot;&gt;Collect data&lt;/h3&gt;

&lt;p&gt;Once the event collector is created, we can use it to record data and send them to a server.
First, we need to learn how to create a data format.
It is simple since, by default, the recorder uses &lt;a href=&quot;https://github.com/pharo-open-documentation/pharo-wiki/blob/master/ExternalProjects/Export/JSON.md&quot;&gt;Ston&lt;/a&gt; as a format to send the data.
So we can use nearly everything.&lt;/p&gt;

&lt;p&gt;To collect new data, we can use both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#add: anEvent&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#addIfAvailable: anEvent&lt;/code&gt;.
However, we should use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#addIfAvailable:&lt;/code&gt; because it will check users have accepted to send their data.
Unless you don’t care about privacy :smiling_imp:?&lt;/p&gt;

&lt;p&gt;So, let’s add a simple data:&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;eventCollector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addIfAvailable:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my previous work, I wanted to record more complex data.
A good way to do it is to use dictionary.
In the following, I present an example using dictionary created from an Announcement.&lt;/p&gt;

&lt;p&gt;First, I created a method in TUAAnnouncement (it is a subclass of Announcement for my project) that adds my data to a dictionary.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;TUAAnnouncement&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;#dataForTestUsageAnalyser&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataForTestUsageAnalyser&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#entity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;this is the content of my announcement&quot;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#dataVersion&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;this is the version of my data, so I can select the data from a specific version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;yourself&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method is also understood by Object itself (to avoid bugs).&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;#dataForTestUsageAnalyser&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dictionary&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, when I want to record an announcement, I use a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#recordAnnouncement:&lt;/code&gt; that takes an announcement and records some entries in the dictionary and adds them to the collector.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;recordAnnouncement:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anAnnouncement&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anAnnouncement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;respondsTo:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#dataForTestUsageAnalyser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ifTrue:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eventCollector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addIfAvailable:&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anAnnouncement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataForTestUsageAnalyser&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;get a dictionary from the announcement&quot;&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#type&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anAnnouncement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;some meta data I used&quot;&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#timestamps&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateAndTime&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;Useful to determine the creation date of an entry&quot;&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;yourself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;blabla&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;extract-the-data&quot;&gt;Extract the data&lt;/h2&gt;

&lt;p&gt;Once the data has been collected, we need to download them from the server.
By default, all the data can be downloaded at &lt;a href=&quot;http://gc.dcc.uchile.cl/&quot;&gt;http://gc.dcc.uchile.cl/&lt;/a&gt;.
If everything goes well, we can now see your category in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt/events/&amp;lt;myCategory&amp;gt;&lt;/code&gt;.
In my case, we have data in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt/events/testsUsageAnalyserEvents&lt;/code&gt;
The data are sort by month.&lt;/p&gt;

&lt;p&gt;To analyse the data, the first step is to open a Pharo image.
Then, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GTEventTool&lt;/code&gt; to unpack our data in the Pharo memory and analyse it.&lt;/p&gt;

&lt;p&gt;The tool comes with methods to download and extract the data.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;GTEventTool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensureLocalDirectory&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;download the data and extract them (from the archive)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the data is downloaded, we can load it in Pharo.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;GTEventTool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unpackAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;unpack all the data&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;GTEventTool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unpackAll:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'./gt/events/testsUsageAnalyserEvents'&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asFileReference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot;unpack the data in testsUsageAnalyserEvents&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, we already have a lot of data (~1Go).
If you want to go faster, I’ve created some helpers.&lt;/p&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unpackDirectory:&lt;/code&gt; will do the first step of unpacking and can be executed on only one directory.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;unpackDirectory:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aStringPath&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GTEventUnpacking&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unpackDirectory:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aStringPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asFileReference&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unpackedCollectionOfGTEvent:&lt;/code&gt; will take a collection of GTEvent, which is the return of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unpackDirectory:&lt;/code&gt; and convert each entry into the real data.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;unpackedCollectionOfGTEvent:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aCollectionOfGTEvent&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aCollectionOfGTEvent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatCollect:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#safeUnpackedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now analyze the data.&lt;/p&gt;</content><author><name>Benoît &quot;badetitou&quot; Verhaeghe</name></author><category term="misc" /><category term="pharo" /><category term="data" /><summary type="html">Introduction</summary></entry><entry><title type="html">Analyze OO project</title><link href="http://badetitou.github.io/misc/moose/pharo/2019/09/13/OOAnalysis/" rel="alternate" type="text/html" title="Analyze OO project" /><published>2019-09-13T10:00:00+00:00</published><updated>2019-09-13T10:00:00+00:00</updated><id>http://badetitou.github.io/misc/moose/pharo/2019/09/13/OOAnalysis</id><content type="html" xml:base="http://badetitou.github.io/misc/moose/pharo/2019/09/13/OOAnalysis/">&lt;p&gt;When I discover a new project I always do the same analysis.
So I decided to create a little project with my scripts to gather important information.
In this post, I present how to use my scripts with a java project.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;In this post, we will extract information from the &lt;a href=&quot;https://github.com/traccar/traccar-web&quot;&gt;Traccar project&lt;/a&gt;.
Traccar is a Java application that used the GWT framework to create a Riche Internet Application.
You can download Traccar.&lt;/p&gt;

&lt;p&gt;Once the application is downloaded, we generate a &lt;em&gt;.mse&lt;/em&gt; file thanks to &lt;a href=&quot;https://github.com/moosetechnology/VerveineJ&quot;&gt;VerveineJ&lt;/a&gt;.
Please refer to the &lt;a href=&quot;https://moosetechnology.github.io/moose-wiki/projects/parsers/VerveineJ.html&quot;&gt;VerveineJ documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;The analysis is done with &lt;a href=&quot;https://moosetechnology.github.io/moose-wiki/&quot;&gt;Moose&lt;/a&gt;.
First of all, we need to &lt;a href=&quot;https://moosetechnology.github.io/moose-wiki/Beginners/InstallMoose.html&quot;&gt;download a Moose 8 image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we load the &lt;em&gt;.mse&lt;/em&gt; file in Moose.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;Import the model in moose&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FAMIXMooseModel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;importFromMSEStream:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'./path/to/file.mse'&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asFileReference&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rootFolder:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/path/to/rootfolder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;Add the model in the Moose Panel and compute some metrics&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;My scripts are available on github.
You can easily install them by executing the following line in a playground:&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Metacello&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;githubUser:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'badetitou'&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'OOAnalysis'&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commitish:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'master'&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;baseline:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'OOAnalysis'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-analysis&quot;&gt;The analysis&lt;/h2&gt;

&lt;p&gt;Once the tool is installed, open the System Browser and check the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOCriticsVisu&lt;/code&gt; with the protocol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;software visualization&lt;/code&gt;.
You can execute the methods from the browser by clicking on the methods icon.
Each method will execute a common analysis on the loaded model.&lt;/p&gt;

&lt;p&gt;In the following section, I describe the analysis.&lt;/p&gt;

&lt;h3 id=&quot;queries&quot;&gt;Queries&lt;/h3&gt;

&lt;h4 id=&quot;main-methods&quot;&gt;Main methods&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#mainMethods&lt;/code&gt; searches the main methods inside the Java project.
In the case of Traccar there is none since the project is run by the GWT framework.
In other projects, you can find several mains.
It may be interesting to understand why.
Probably some are used for testing.&lt;/p&gt;

&lt;h4 id=&quot;god-classes-by-lines&quot;&gt;God classes by lines&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#godClassesByLines&lt;/code&gt; returns the classes with more than 150 lines of code.
In Traccar, it founds 36 classes.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allModelClasses&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfLinesOfCode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, it asks the model all the model classes (the classes that are part of Traccar, excluding the classes from its dependencies).
Then, it select classes with a number of line of code superior to 150.&lt;/p&gt;

&lt;h4 id=&quot;god-classes-by-methods&quot;&gt;God classes by methods&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#godClassesByMethods&lt;/code&gt; returns the classes with more than 50 methods.
In Traccar, there are 4 god classes with more than 50 methods.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allModelClasses&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfMethods&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, it asks the model all the model classes (the classes that are part of Traccar, excluding the classes from its dependencies).
Then, it selects classes with a number of methods superior to 50.&lt;/p&gt;

&lt;h3 id=&quot;visualizations&quot;&gt;Visualizations&lt;/h3&gt;

&lt;h4 id=&quot;class-diagram&quot;&gt;Class diagram&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#classDiagram&lt;/code&gt; shows the class diagram of the project.
It uses Roassal to create the visualization.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; b &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RTMondrian&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nodes:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allClasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectFrom:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, it creates a mondrian.
Then, it defines the nodes of the visualization, in our case, it is all the classes of the model.
It connects the nodes by asking for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#superclass&lt;/code&gt;.
Finally, it defines the layout as a tree.&lt;/p&gt;

&lt;h4 id=&quot;packages-hierarchy-with-complexity&quot;&gt;Packages hierarchy with complexity&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#packagesHierarchyWithComplexity&lt;/code&gt; shows the package hierarchy and their complexity.
The width corresponds to the number of classes.
The height corresponds to the number of methods.
The color corresponds to the number of lines of code.
In Traccar, the most important packages seems to be &lt;em&gt;org::traccar::web::client::view&lt;/em&gt; and &lt;em&gt;org::traccar::web::server::model&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-st highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RTMondrian&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rectangle&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfClasses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfMethods&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;linearFillColor:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#numberOfLinesOfCode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;within:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allModelNamespaces&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;borderColor:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lightGray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;nodes:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allModelNamespaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;edgesFrom:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;#parentScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;treeLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, it defines how an element should be displayed.
Then , it adds the namespaces (packages) as nodes and connect them with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#parentScope&lt;/code&gt; keyword.
Finally, it defines the layout as a tree.&lt;/p&gt;</content><author><name>Benoît &quot;badetitou&quot; Verhaeghe</name></author><category term="misc" /><category term="moose" /><category term="pharo" /><summary type="html">When I discover a new project I always do the same analysis. So I decided to create a little project with my scripts to gather important information. In this post, I present how to use my scripts with a java project.</summary></entry><entry><title type="html">Cheat sheet Pandoc Md to pdf</title><link href="http://badetitou.github.io/misc/pandoc/2018/02/09/markdownToPdfWithPandocCheatSheet/" rel="alternate" type="text/html" title="Cheat sheet Pandoc Md to pdf" /><published>2018-02-09T14:42:10+00:00</published><updated>2019-09-12T14:42:10+00:00</updated><id>http://badetitou.github.io/misc/pandoc/2018/02/09/markdownToPdfWithPandocCheatSheet</id><content type="html" xml:base="http://badetitou.github.io/misc/pandoc/2018/02/09/markdownToPdfWithPandocCheatSheet/">&lt;h2 id=&quot;write-tips&quot;&gt;Write tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Write comment: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[//]: # My comment&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add bibliography: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Defining specification for image &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![Text Caption](figures/linkImage.png){#tagReference width=500 height=350}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linked image &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ![title](link/image)](link/image)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Two figures with caption&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\begin{figure}
    \centering
    \begin{minipage}{0.45\textwidth}
        \centering
        \includegraphics[width=0.9\textwidth]{ScreenShot/HubApp.png} % first figure itself
        \caption{\label{bacASable} Page d'accueil bac à sable}
    \end{minipage}\hfill
    \begin{minipage}{0.45\textwidth}
        \centering
        \includegraphics[width=0.9\textwidth]{ScreenShot/Code.png} % second figure itself
        \caption{\label{code} Page d'accueil code JAVA}
    \end{minipage}
\end{figure}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Benoît &quot;badetitou&quot; Verhaeghe</name></author><category term="misc" /><category term="pandoc" /><summary type="html">Write tips</summary></entry></feed>